{"ast":null,"code":"const faunadb = require('faunadb');\n\nconst secret = 'fnADvJ5QvfACACNpsYIHM7vdvpeS4eBHZrgsek4w';\nconst q = faunadb.query;\nlet roleFlag = false;\nvar client = new faunadb.Client({\n  secret\n});\n\nmodule.exports = async (req, res) => {\n  try {\n    let clientRol = await client.query(q.CreateRole({\n      name: 'dev2020',\n      privileges: [{\n        resource: q.Collection('Usuario'),\n        actions: {\n          read: true,\n          write: true,\n          create: true\n        }\n      }, {\n        resource: q.Collection('Comercio'),\n        actions: {\n          read: true,\n          write: true,\n          create: true\n        }\n      }, {\n        resource: q.Collection('Ticket'),\n        actions: {\n          read: true,\n          write: true,\n          create: true\n        }\n      }, {\n        resource: q.Collection('Producto'),\n        actions: {\n          read: true,\n          write: true,\n          create: true\n        }\n      }, {\n        resource: q.Index('allComercios'),\n        actions: {\n          read: true\n        }\n      }, {\n        resource: q.Index('allComerciosByStatus'),\n        actions: {\n          read: true\n        }\n      }, {\n        resource: q.Index('allUsers'),\n        actions: {\n          read: true\n        }\n      }, {\n        resource: q.Index('allTickets'),\n        actions: {\n          read: true\n        }\n      }, {\n        resource: q.Index('allProducts'),\n        actions: {\n          read: true\n        }\n      }, {\n        resource: q.Index('allProductsByEnum'),\n        actions: {\n          read: true\n        }\n      }, {\n        resource: q.Index('productByName'),\n        actions: {\n          read: true\n        }\n      }, {\n        resource: q.Index('userByEmail'),\n        actions: {\n          read: true\n        }\n      }, {\n        resource: q.Index('comercioBySlug'),\n        actions: {\n          read: true\n        }\n      }]\n    }));\n    clientRol = await client.query(q.CreateKey({\n      role: q.Role('dev2020')\n    }));\n    res.status(200).json(clientRol);\n    console.log(clientRol);\n  } catch (e) {\n    // something went wrong\n    res.status(500).json({\n      error: e.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/xampp/htdocs/daniphp/nextjs/dinerapp/pages/api/fauna.js"],"names":["faunadb","require","secret","q","query","roleFlag","client","Client","module","exports","req","res","clientRol","CreateRole","name","privileges","resource","Collection","actions","read","write","create","Index","CreateKey","role","Role","status","json","console","log","e","error","message"],"mappings":"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","sourcesContent":["const faunadb = require('faunadb');\r\n\r\nconst secret = 'fnADvJ5QvfACACNpsYIHM7vdvpeS4eBHZrgsek4w';\r\n\r\n\r\nconst q = faunadb.query;\r\nlet roleFlag = false;\r\nvar client = new faunadb.Client({ secret });\r\n\r\nmodule.exports = async(req, res) => {\r\n\r\n    try {\r\n        \r\n      let clientRol = await client.query(\r\n        q.CreateRole({\r\n            name: 'dev2020',\r\n            privileges: [\r\n              {\r\n                resource: q.Collection('Usuario'),\r\n                actions: { read: true, write: true, create: true },\r\n              },\r\n              {\r\n                resource: q.Collection('Comercio'),\r\n                actions: { read: true, write: true, create: true },\r\n              },\r\n              {\r\n                resource: q.Collection('Ticket'),\r\n                actions: { read: true, write: true, create: true },\r\n              },\r\n              {\r\n                resource: q.Collection('Producto'),\r\n                actions: { read: true, write: true, create: true },\r\n              },\r\n              {\r\n                resource: q.Index('allComercios'),\r\n                actions: { read: true },\r\n              },\r\n              {\r\n                resource: q.Index('allComerciosByStatus'),\r\n                actions: { read: true },\r\n              },\r\n              {\r\n                resource: q.Index('allUsers'),\r\n                actions: { read: true },\r\n              },\r\n              {\r\n                resource: q.Index('allTickets'),\r\n                actions: { read: true },\r\n              },\r\n              {\r\n                resource: q.Index('allProducts'),\r\n                actions: { read: true },\r\n              },\r\n              {\r\n                resource: q.Index('allProductsByEnum'),\r\n                actions: { read: true },\r\n              },\r\n              {\r\n                resource: q.Index('productByName'),\r\n                actions: { read: true },\r\n              },\r\n              {\r\n                resource: q.Index('userByEmail'),\r\n                actions: { read: true },\r\n              },\r\n              {\r\n                resource: q.Index('comercioBySlug'),\r\n                actions: { read: true },\r\n              },\r\n            ],\r\n          })\r\n      )\r\n      clientRol = await client.query(\r\n          \r\n        q.CreateKey({\r\n            role: q.Role('dev2020'),\r\n        })\r\n    );\r\n    res.status(200).json(clientRol);\r\n    console.log(clientRol);\r\n    } catch (e) {\r\n      // something went wrong\r\n      res.status(500).json({ error: e.message })\r\n    }\r\n  }\r\n\r\n\r\n"]},"metadata":{},"sourceType":"script"}